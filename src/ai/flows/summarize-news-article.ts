// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Summarizes a news article related to a stock ticker.
 *
 * - summarizeNewsArticle - A function that summarizes the news article.
 * - SummarizeNewsArticleInput - The input type for the summarizeNewsArticle function.
 * - SummarizeNewsArticleOutput - The return type for the summarizeNewsArticle function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeNewsArticleInputSchema = z.object({
  articleTitle: z.string().describe('The title of the news article.'),
  articleUrl: z.string().describe('The URL of the news article.'),
  articleContent: z.string().describe('The content of the news article.'),
  stockTicker: z.string().describe('The stock ticker symbol related to the article.'),
});
export type SummarizeNewsArticleInput = z.infer<typeof SummarizeNewsArticleInputSchema>;

const SummarizeNewsArticleOutputSchema = z.object({
  summary: z.string().describe('A brief summary of the news article.'),
  sourceUrl: z.string().describe('The URL of the original news article.'),
});
export type SummarizeNewsArticleOutput = z.infer<typeof SummarizeNewsArticleOutputSchema>;

export async function summarizeNewsArticle(input: SummarizeNewsArticleInput): Promise<SummarizeNewsArticleOutput> {
  return summarizeNewsArticleFlow(input);
}

const summarizeNewsArticlePrompt = ai.definePrompt({
  name: 'summarizeNewsArticlePrompt',
  input: {schema: SummarizeNewsArticleInputSchema},
  output: {schema: SummarizeNewsArticleOutputSchema},
  prompt: `You are an AI assistant that summarizes news articles related to specific stock tickers. Given the following article content, title, URL and the stock ticker, provide a concise summary of the article, and ensure you link back to the original source.

Stock Ticker: {{{stockTicker}}}
Article Title: {{{articleTitle}}}
Article URL: {{{articleUrl}}}
Article Content: {{{articleContent}}}

Summary: `,
});

const summarizeNewsArticleFlow = ai.defineFlow(
  {
    name: 'summarizeNewsArticleFlow',
    inputSchema: SummarizeNewsArticleInputSchema,
    outputSchema: SummarizeNewsArticleOutputSchema,
  },
  async input => {
    const {output} = await summarizeNewsArticlePrompt(input);
    return {
      summary: output?.summary ?? 'Summary not available.',
      sourceUrl: input.articleUrl,
    };
  }
);
